generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  name                  String
  firstname             String                  @default("")
  email                 String                  @unique
  password              String                  @default("")
  email_verified_at     DateTime?
  image                 String?
  created_at            DateTime                @default(now())
  updated_at            DateTime                @default(now())
  AuthorizationToken    AuthorizationToken[]
  PasswordResetToken    PasswordResetToken[]
  Account               Account[]
  Setting               Setting?
  Category              Category[]
  ConfirmationCode      ConfirmationCode[]
  Transaction           Transaction[]
  TransactionRecurrence TransactionRecurrence[]
  Notification          Notification[]
  TransactionHistory    TransactionHistory[]

  @@map("users")
}

model AuthorizationToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  device     String?
  token      String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("authorization_tokens")
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  email      String
  user       User     @relation(fields: [email], references: [email])
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("password_reset_tokens")
}

model Account {
  id          Int           @id @default(autoincrement())
  user_id     Int
  user        User          @relation(fields: [user_id], references: [id])
  name        String
  balance     Float         @default(0)
  icon        String?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now())
  Transaction Transaction[]

  @@map("accounts")
}

model Setting {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  user       User     @relation(fields: [user_id], references: [id])
  language   String
  currency   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("settings")
}

model Category {
  id          Int           @id @default(autoincrement())
  user_id     Int
  user        User          @relation(fields: [user_id], references: [id])
  name        String
  icon        String?
  budget      Float         @default(0)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now())
  Transaction Transaction[]

  @@map("categories")
}

model ConfirmationCode {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  code       Int
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("confirmation_codes")
}

model TransactionRecurrence {
  id             Int         @id @default(autoincrement())
  transaction_id Int         @unique
  pattern        String
  transaction    Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  next_occurence DateTime
  created_at     DateTime    @default(now())
  updated_at     DateTime    @default(now())
  User           User?       @relation(fields: [user_id], references: [id])
  user_id        Int?

  @@map("transaction_recurrences")
}

model Transaction {
  id                     Int                    @id @default(autoincrement())
  user_id                Int
  account_id             Int
  category_id            Int
  amount                 Float
  description            String                 @db.LongText
  icon                   String
  type                   String
  user                   User                   @relation(fields: [user_id], references: [id])
  account                Account?               @relation(fields: [account_id], references: [id])
  category               Category?              @relation(fields: [category_id], references: [id])
  created_at             DateTime               @default(now())
  updated_at             DateTime               @default(now())
  transaction_recurrence TransactionRecurrence?
  TransactionHistory     TransactionHistory[]

  @@map("transactions")
}

model Notification {
  id         Int       @id @default(autoincrement())
  user_id    Int
  read_at    DateTime?
  data       Json
  user       User      @relation(fields: [user_id], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())

  @@map("notifications")
}

model TransactionHistory {
  id             Int         @id @default(autoincrement())
  user_id        Int
  transaction_id Int
  created_at     DateTime    @default(now())
  updated_at     DateTime    @default(now())
  transaction    Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [user_id], references: [id])

  @@map("transaction_histories")
}
